// Less Colors
// at some point this was More Colors (https://forums.alliedmods.net/showthread.php?t=185016)

#if defined _lesscolors_included
 #endinput
#endif
#define _lesscolors_included

#define MAX_MESSAGE_LENGTH  256
#define MAX_BUFFER_LENGTH   1024

#define COLOR_RED                   0xFF4040
#define COLOR_BLUE                  0x99CCFF
#define COLOR_GRAY                  0xCCCCCC
#define COLOR_GREEN                 0x3EFF3E
#define COLOR_UNUSUAL               0x8650AC
#define COLOR_ALICEBLUE             0xF0F8FF
#define COLOR_ORANGERED             0xFF4500
#define COLOR_CORRUPTED             0xA32C2E
#define COLOR_DARKVIOLET            0x9400D3
#define COLOR_DARKCYAN              0x008B8B
#define COLOR_KHAKI                 0xF0E68C
#define COLOR_FIREBRICK             0xB22222
#define COLOR_MEDIUMVIOLETRED       0xC71585
#define COLOR_NAVAJOWHITE           0xFFDEAD
#define COLOR_WHITESMOKE            0xF5F5F5
#define COLOR_LIGHTSEAGREEN         0x20B2AA
#define COLOR_DARKMAGENTA           0x8B008B
#define COLOR_FROZEN                0x4983B3
#define COLOR_LIGHTCORAL            0xF08080
#define COLOR_DARKORANGE            0xFF8C00
#define COLOR_DARKGOLDENROD         0xB8860B
#define COLOR_CORAL                 0xFF7F50
#define COLOR_LINEN                 0xFAF0E6
#define COLOR_MEDIUMPURPLE          0x9370D8
#define COLOR_SNOW                  0xFFFAFA
#define COLOR_EXALTED               0xCCCCCD
#define COLOR_DARKBLUE              0x00008B
#define COLOR_DARKORCHID            0x9932CC
#define COLOR_DEEPPINK              0xFF1493
#define COLOR_DIMGRAY               0x696969
#define COLOR_VALVE                 0xA50F79
#define COLOR_VINTAGE               0x476291
#define COLOR_PERU                  0xCD853F
#define COLOR_HAUNTED               0x38F3AB
#define COLOR_MEDIUMSPRINGGREEN     0x00FA9A
#define COLOR_MEDIUMAQUAMARINE      0x66CDAA
#define COLOR_CHOCOLATE             0xD2691E
#define COLOR_SEASHELL              0xFFF5EE
#define COLOR_LIMEGREEN             0x32CD32
#define COLOR_SLATEBLUE             0x6A5ACD
#define COLOR_FULLBLUE              0x0000FF
#define COLOR_GENUINE               0x4D7455
#define COLOR_BEIGE                 0xF5F5DC
#define COLOR_NAVY                  0x000080
#define COLOR_PEACHPUFF             0xFFDAB9
#define COLOR_VIOLET                0xEE82EE
#define COLOR_CYAN                  0x00FFFF
#define COLOR_HOTPINK               0xFF69B4
#define COLOR_LIGHTPINK             0xFFB6C1
#define COLOR_GAINSBORO             0xDCDCDC
#define COLOR_DIMGREY               0x696969
#define COLOR_WHEAT                 0xF5DEB3
#define COLOR_LIGHTGRAY             0xD3D3D3
#define COLOR_FULLRED               0xFF0000
#define COLOR_DARKTURQUOISE         0x00CED1
#define COLOR_MISTYROSE             0xFFE4E1
#define COLOR_PALEGOLDENROD         0xEEE8AA
#define COLOR_COLLECTORS            0xAA0000
#define COLOR_DARKSLATEGRAY         0x2F4F4F
#define COLOR_ANCIENT               0xEB4B4B
#define COLOR_YELLOW                0xFFFF00
#define COLOR_DARKSEAGREEN          0x8FBC8F
#define COLOR_TOMATO                0xFF6347
#define COLOR_MYTHICAL              0x8847FF
#define COLOR_ORANGE                0xFFA500
#define COLOR_MINTCREAM             0xF5FFFA
#define COLOR_IVORY                 0xFFFFF0
#define COLOR_MAGENTA               0xFF00FF
#define COLOR_HONEYDEW              0xF0FFF0
#define COLOR_LEGENDARY             0xD32CE6
#define COLOR_SILVER                0xC0C0C0
#define COLOR_CHARTREUSE            0x7FFF00
#define COLOR_UNCOMMON              0xB0C3D9
#define COLOR_WHITE                 0xFFFFFF
#define COLOR_ORCHID                0xDA70D6
#define COLOR_LIGHTGREY             0xD3D3D3
#define COLOR_BLANCHEDALMOND        0xFFEBCD
#define COLOR_GOLDENROD             0xDAA520
#define COLOR_LEMONCHIFFON          0xFFFACD
#define COLOR_MAROON                0x800000
#define COLOR_DARKSLATEGREY         0x2F4F4F
#define COLOR_MEDIUMSLATEBLUE       0x7B68EE
#define COLOR_PAPAYAWHIP            0xFFEFD5
#define COLOR_CORNFLOWERBLUE        0x6495ED
#define COLOR_DEEPSKYBLUE           0x00BFFF
#define COLOR_LIGHTSTEELBLUE        0xB0C4DE
#define COLOR_MEDIUMBLUE            0x0000CD
#define COLOR_MIDNIGHTBLUE          0x191970
#define COLOR_TAN                   0xD2B48C
#define COLOR_THISTLE               0xD8BFD8
#define COLOR_STEELBLUE             0x4682B4
#define COLOR_YELLOWGREEN           0x9ACD32
#define COLOR_PALETURQUOISE         0xAFEEEE
#define COLOR_INDIGO                0x4B0082
#define COLOR_LIGHTSALMON           0xFFA07A
#define COLOR_DARKGREEN             0x006400
#define COLOR_SPRINGGREEN           0x00FF7F
#define COLOR_INDIANRED             0xCD5C5C
#define COLOR_BISQUE                0xFFE4C4
#define COLOR_DARKOLIVEGREEN        0x556B2F
#define COLOR_BURLYWOOD             0xDEB887
#define COLOR_DARKGRAY              0xA9A9A9
#define COLOR_MOCCASIN              0xFFE4B5
#define COLOR_PLUM                  0xDDA0DD
#define COLOR_SEAGREEN              0x2E8B57
#define COLOR_LIGHTSLATEGRAY        0x778899
#define COLOR_AZURE                 0x007FFF
#define COLOR_SELFMADE              0x70B04A
#define COLOR_TURQUOISE             0x40E0D0
#define COLOR_AQUA                  0x00FFFF
#define COLOR_PURPLE                0x800080
#define COLOR_SLATEGRAY             0x708090
#define COLOR_GREENYELLOW           0xADFF2F
#define COLOR_STRANGE               0xCF6A32
#define COLOR_MEDIUMSEAGREEN        0x3CB371
#define COLOR_DARKRED               0x8B0000
#define COLOR_CRIMSON               0xDC143C
#define COLOR_GHOSTWHITE            0xF8F8FF
#define COLOR_DARKGREY              0xA9A9A9
#define COLOR_AQUAMARINE            0x7FFFD4
#define COLOR_DODGERBLUE            0x1E90FF
#define COLOR_LAVENDER              0xE6E6FA
#define COLOR_BLUEVIOLET            0x8A2BE2
#define COLOR_LAVENDERBLUSH         0xFFF0F5
#define COLOR_COMMON                0xB0C3D9
#define COLOR_LIGHTSLATEGREY        0x778899
#define COLOR_OLDLACE               0xFDF5E6
#define COLOR_PALEGREEN             0x98FB98
#define COLOR_SLATEGREY             0x708090
#define COLOR_SANDYBROWN            0xF4A460
#define COLOR_ROSYBROWN             0xBC8F8F
#define COLOR_LIGHTGOLDENRODYELLOW  0xFAFAD2
#define COLOR_GOLD                  0xFFD700
#define COLOR_OLIVE                 0x9EC34F
#define COLOR_DARKSALMON            0xE9967A
#define COLOR_LIGHTGREEN            0x99FF99
#define COLOR_PINK                  0xFFC0CB
#define COLOR_PALEVIOLETRED         0xD87093
#define COLOR_DARKKHAKI             0xBDB76B
#define COLOR_LIME                  0x00FF00
#define COLOR_MEDIUMTURQUOISE       0x48D1CC
#define COLOR_NORMAL                0xB2B2B2
#define COLOR_LIGHTCYAN             0xE0FFFF
#define COLOR_RARE                  0x4B69FF
#define COLOR_CORNSILK              0xFFF8DC
#define COLOR_AXIS                  0xFF4040
#define COLOR_LIGHTYELLOW           0xFFFFE0
#define COLOR_OLIVEDRAB             0x6B8E23
#define COLOR_POWDERBLUE            0xB0E0E6
#define COLOR_LIGHTSKYBLUE          0x87CEFA
#define COLOR_TEAL                  0x008080
#define COLOR_FUCHSIA               0xFF00FF
#define COLOR_COMMUNITY             0x70B04A
#define COLOR_SIENNA                0xA0522D
#define COLOR_SKYBLUE               0x87CEEB
#define COLOR_ALLIES                0x4D7942
#define COLOR_BLACK                 0x000000
#define COLOR_BROWN                 0xA52A2A
#define COLOR_GREY                  0xCCCCCC
#define COLOR_UNIQUE                0xFFD700
#define COLOR_FLORALWHITE           0xFFFAF0
#define COLOR_LIGHTBLUE             0xADD8E6
#define COLOR_ARCANA                0xADE55C
#define COLOR_DARKSLATEBLUE         0x483D8B
#define COLOR_FORESTGREEN           0x228B22
#define COLOR_CADETBLUE             0x5F9EA0
#define COLOR_MEDIUMORCHID          0xBA55D3
#define COLOR_ROYALBLUE             0x4169E1
#define COLOR_ANTIQUEWHITE          0xFAEBD7
#define COLOR_IMMORTAL              0xE4AE33
#define COLOR_SADDLEBROWN           0x8B4513
#define COLOR_SALMON                0xFA8072
#define COLOR_LAWNGREEN             0x7CFC00
#define COLOR_GREENTEXT             0x789922

/**
 * Prints a message to a specific client in the chat area.
 * 
 * @param client		Client index.
 * @param message		Message.
 * @param ...			Format parameters.
 * 
 * @error				The client is not connected.
 */
stock void CPrintToChat(int client, const char[] message, any ...) 
{
	if (client <= 0 || client > MaxClients) {
		ThrowError("Invalid client index %i", client);
	}
	
	if (!IsClientInGame(client)) {
		ThrowError("Client %i is not in game", client);
	}
	
	char buffer[MAX_BUFFER_LENGTH]; 
	char buffer2[MAX_BUFFER_LENGTH];
	
	FormatEx(buffer, sizeof(buffer), "\x01%s", message);
	VFormat(buffer2, sizeof(buffer2), buffer, 3);
	
	CSendMessage(client, buffer2);
}

/**
 * Prints a message to all clients in the chat area.
 * 
 * @param client		Client index.
 * @param message		Message.
 * @param ...			Format parameters.
 */
stock void CPrintToChatAll(const char[] message, any ...) 
{
	char buffer[MAX_BUFFER_LENGTH]; 
	char buffer2[MAX_BUFFER_LENGTH];
	
	for (int i = 1; i <= MaxClients; i++) {
		if (!IsClientInGame(i)) {
			continue;
		}
		
		FormatEx(buffer, sizeof(buffer), "\x01%s", message);
		VFormat(buffer2, sizeof(buffer2), buffer, 2);
		
		CSendMessage(i, buffer2);
	}
}

/**
 * Sends a SayText2 usermessage.
 * 
 * @param client	Client to send usermessage to.
 * @param message	Message to send.
 */
stock void CSendMessage(int client, const char[] message, int author = 0) 
{
	if (author == 0) {
		author = client;
	}
	
	static int protobuf = -1;
	
	if (protobuf == -1) {
		protobuf = view_as<int>(GetFeatureStatus(FeatureType_Native, "GetUserMessageType") == FeatureStatus_Available && GetUserMessageType() == UM_Protobuf);
	}
	
	char buffer[MAX_MESSAGE_LENGTH]; 
	strcopy(buffer, sizeof(buffer), message);
	
	Handle buf = StartMessageOne("SayText2", client, USERMSG_RELIABLE|USERMSG_BLOCKHOOKS);
	
	if (protobuf) {
		PbSetInt(buf, "ent_idx", author);
		PbSetBool(buf, "chat", true);
		PbSetString(buf, "msg_name", buffer);
		PbAddString(buf, "params", "");
		PbAddString(buf, "params", "");
		PbAddString(buf, "params", "");
		PbAddString(buf, "params", "");
	} else {
		BfWriteByte(buf, author); 	// Message author
		BfWriteByte(buf, true); 	// Chat message
		BfWriteString(buf, buffer); // Message text
	}
	
	EndMessage();
}

/**
 * Gets a part of a string.
 * 
 * @param input			String to get the part from.
 * @param output		Buffer to write to.
 * @param maxlen		Max length of output buffer.
 * @param start			Position to start at.
 * @param numChars		Number of characters to return, or 0 for the end of the string.
 *
 */
stock void CSubString(const char[] input, char[] output, int maxlen, int start, int numChars = 0) 
{
	int i = 0;
	
	for(;;) {
		if (i == maxlen - 1 || i >= numChars || input[start + i] == '\0') {
			output[i] = '\0';
			return;
		}
		output[i] = input[start + i];
		i++;
	}
}

/**
 * Converts a string to lowercase.
 *
 * @param buffer	String to convert.
 *
 */
stock void CStrToLower(char[] buffer) 
{
	int len = strlen(buffer);
	
	for (int i = 0; i < len; i++) {
		buffer[i] = CharToLower(buffer[i]);
	}
}

/**
 * Converts a string to uppercase.
 * 
 * @param buffer	String to convert.
 *
 */
stock void CStrToUpper(char[] buffer) 
{
	int len = strlen(buffer);
	
	for (int i = 0; i < len; i++) {
		buffer[i] = CharToUpper(buffer[i]);
	}
}

/**
 * Replies to a command with colors.
 * 
 * @param client		Client to reply to.
 * @param message		Message.
 * @param ...			Format parameters.
 *
 */
stock void CReplyToCommand(int client, const char[] message, any ...) 
{
	char buffer[MAX_BUFFER_LENGTH];
	
	VFormat(buffer, sizeof(buffer), message, 3);
	
	if (GetCmdReplySource() == SM_REPLY_TO_CONSOLE) {
		PrintToConsole(client, "%s", buffer);
	} else {
		CPrintToChat(client, "%s", buffer);
	}
}

/**
 * Shows admin activity with colors.
 * 
 * @param client		Client performing an action.
 * @param message		Message.
 * @param ...			Format parameters.
 *
 */
stock void CShowActivity(int client, const char[] message, any ...) 
{
	if (client < 0 || client > MaxClients) {
		ThrowError("Invalid client index %d", client);
	}
	
	if (client != 0 && !IsClientInGame(client)) {
		ThrowError("Client %d is not in game", client);
	}
	
	char buffer[MAX_BUFFER_LENGTH]; 
	char buffer2[MAX_BUFFER_LENGTH];
	
	FormatEx(buffer, sizeof(buffer), "\x01%s", message);
	VFormat(buffer2, sizeof(buffer2), buffer, 3);
	
	ShowActivity(client, "%s", buffer2);
}

/**
 * Shows admin activity with colors.
 * 
 * @param client		Client performing an action.
 * @param tag			Tag to prepend to the message.
 * @param message		Message.
 * @param ...			Format parameters.
 */
stock void CShowActivity2(int client, char[] tag, const char[] message, any ...) 
{
	if (client < 0 || client > MaxClients) {
		ThrowError("Invalid client index %d", client);
	}
	if (client != 0 && !IsClientInGame(client)) {
		ThrowError("Client %d is not in game", client);
	}
	
	char buffer[MAX_BUFFER_LENGTH]; 
	char buffer2[MAX_BUFFER_LENGTH];
	
	FormatEx(buffer, sizeof(buffer), "\x01%s", message);
	VFormat(buffer2, sizeof(buffer2), buffer, 4);
	
	strcopy(buffer, sizeof(buffer), tag);
	
	ShowActivity2(client, buffer, "%s", buffer2);
}

/**
 * Returns the hexadecimal representation of a client's team color.
 *
 * @param client		Client to get the team color for
 *
 * @return				Client's team color in hexadecimal, or green if unknown
 * @error				The client index passed is invalid or not in game.
 */
stock int CGetTeamColor(int client) 
{
	if (client <= 0 || client > MaxClients) {
		ThrowError("Invalid client index %i", client);
	} else if (!IsClientInGame(client)) {
		return COLOR_GRAY;
	} 
	
	int value;
	switch(GetClientTeam(client)) {
		case 1: {
			value = COLOR_GRAY;
		}
		case 2: {
			value = COLOR_RED;
		}
		case 3: {
			value = COLOR_BLUE;
		}
		default: {
			value = COLOR_GREEN;
		}
	}
	
	return value;
}

stock int rgba(int red, int green, int blue, int alpha)
{
	int color;
	
	color |= ((red      & 0xFF) << 24);
	color |= ((green    & 0xFF) << 16);
	color |= ((blue     & 0xFF) << 8);
	color |= ((alpha    & 0xFF) << 0);
	
	return color;
}

stock int rgb(int red, int green, int blue)
{
	int color;
	
	color |= ((red 		& 0xFF) << 16);
	color |= ((green 	& 0xFF) << 8);
	color |= ((blue 	& 0xFF) << 0);
	
	return color;
}

stock char[] ColorStr(int color, bool alpha = false)
{
	char colorstr[16];
	
	if (!alpha) {
		FormatEx(colorstr, sizeof(colorstr), "\x07%06X", color);
	} else {
		FormatEx(colorstr, sizeof(colorstr), "\x08%08X", color);
	}
	
	return colorstr;
}

stock char[] ColorStr_Random(int r_min = 0, int r_max = 255, 
                        int g_min = 0, int g_max = 255, 
                        int b_min = 0, int b_max = 255, 
                        int a_min = -1, int a_max = -1
) {
	char colorstr[16];
	
	if (a_min != -1 && a_max != -1) {
		int color = rgba(GetRandomInt(r_min, r_max), GetRandomInt(g_min, g_max), GetRandomInt(b_min, b_max), GetRandomInt(a_min, a_max));
		
		colorstr = ColorStr(color, true);
	} else {
		int color = rgb(GetRandomInt(r_min, r_max), GetRandomInt(g_min, g_max), GetRandomInt(b_min, b_max));
		
		colorstr = ColorStr(color);
	}
	
	return colorstr;
}